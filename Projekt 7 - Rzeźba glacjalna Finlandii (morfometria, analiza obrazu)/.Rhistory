library(raster)
fin_nmt = raster(file.choose("TPI_10.tif")) # wczytujemy obraz DEM (lub TPI) dla swojego obszaru
fin_nmt = raster("TPI_10.tif") # wczytujemy obraz DEM (lub TPI) dla swojego obszaru
crs(fin_nmt) # sprawdzamy geodniesienie, jeżeli NA -> wykonaj poniżej linijke
fin_lbl = raster("TPI_10_fiji.tif") # wczytujemy obraz z etykietami obiektów
fin_lbl@extent <- fin_nmt@extent # powielamy zasięg
proj4string(fin_lbl) <- CRS("+init=epsg:3047") # nadajemy odniesienie
writeRaster(fin_lbl, filename = "fin_lbl_16bit.tif", datatype='INT2U')
library("readxl")
install.packages("readxl")
fin_lbl = raster("TPI_10_fiji-killBorders-lbl.tif") # wczytujemy obraz z etykietami obiektów
fin_lbl@extent <- fin_nmt@extent # powielamy zasięg
proj4string(fin_lbl) <- CRS("+init=epsg:3047") # nadajemy odniesienie
writeRaster(fin_lbl, filename = "fin_lbl_16bit.tif", datatype='INT2U')
library("readxl")
morp <- read_excel("tabela1.csv") #morph.xls
tabela1 <- read.csv("C:/Users/Student_2/Desktop/HalysProject/tabela1.csv")
View(tabela1)
morp <- tabela1 #read_excel() #morph.xls
tabela2 <- read.csv("C:/Users/Student_2/Desktop/HalysProject/tabela2.csv")
View(tabela2)
inte <- tabela2 #read_excel() #inte.xls
dane <- merge(x = morp, y = inte, by = "Label")
fin_nmt = raster("TPI_10.tif") # wczytujemy obraz DEM (lub TPI) dla swojego obszaru
crs(fin_nmt) # sprawdzamy geodniesienie, jeżeli NA -> wykonaj poniżej linijke
fin_lbl = raster("TPI_10_fiji-killBorders-lbl.tif") # wczytujemy obraz z etykietami obiektów
fin_lbl@extent <- fin_nmt@extent # powielamy zasięg
proj4string(fin_lbl) <- CRS("+init=epsg:3047") # nadajemy odniesienie
writeRaster(fin_lbl, filename = "fin_lbl_16bit.tif", datatype='INT2U')
writeRaster(fin_lbl, filename = "fin_lbl_16bit2.tif", datatype='INT2U')
formy <- shapefile("formy.shp")
formy@data <- dane
cotozaforma <- function(r1,r2) {
E = r1/r2
L = r1
Klasyfikacja <- data.frame()
Klasa <- ""
for (i in 1:length(L)) {
if (E[i] >((2*L[i]/1000)+2)) {
if (L[i]<100) {
Klasa <- "1.Flute"
} else if (L[i]>=100 & L[i]<1000) {
Klasa <- "2.Mega Flute"
} else {
Klasa <- "3.Mega Scale Glacial Lineation"
}
} else {
if (L[i]<800) {
Klasa <- "4.Drumlin"
} else if (L[i]>=800 & L[i]<1050) {
Klasa <- "5.Mega Drumlin"
} else {
Klasa <- "6.Streamlined Hill"
}
}
Klasyfikacja[i,1] <- Klasa
}
return(Klasyfikacja)
}
Klasa <- cotozaforma(r1 = dane$Ellipse.Radius1, r2 = dane$Ellipse.Radius2)
formy@data$Klasa <- Klasa$V1
library(corrplot)
dane1 <- dane[,-c(1,42:51)] # tutaj kolejność może być inna - indywidualna !!!
M <- cor(dane1)
corrplot(M)
dane1 <- dane1[,c(1,3,4,16,30)]
M <- cor(dane1)
corrplot(M)
library(factoextra)
install.packages("factoextra")
library(factoextra)
fviz_nbclust(scale(dane1), kmeans, method='silhouette')
x = 5 ### podać
klaster <- kmeans(scale(dane1), x) ### !!!!!
library(psych)
install.packages("psych")
library(psych)
describeBy(dane1,group = klaster$cluster)
formy@data$Klasa2 <- klaster$cluster
describeBy(formy@data,group = formy@data$Klasa2)
library(fossil)
install.packages("fossil")
rand.index(as.numeric(as.factor(formy@data$Klasa)), klaster$cluster)
library(fossil)
rand.index(as.numeric(as.factor(formy@data$Klasa)), klaster$cluster)
shapefile(formy, 'Morphoforms.shp')
